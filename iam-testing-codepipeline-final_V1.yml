# Copyright [2018] [Phil Chen]

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: 2010-09-09

Description: 'This solution allows you to create a AWS Codepipline for deploying a serverless application with AWS CodeBuild triggered by a Github repo commit. The setup of this solution is fully automated via a CloudFormation template.'

Parameters:
  Environment:
    AllowedValues:
    - dev
    - stg
    - prod
    Description: 'Environment'
    Type: 'String'
    Default: 'stg'

  CodePipelineBucketPrefix:
    Description: CodePipeline needs a utility bucket for its internal use. Specify a unique prefix for the bucket name
    Type: String
    Default: codepipeline-work-iam-tests

  GitHubRepository:
    Type: String
    Default: Jameelkhanmohammad/iam-policy-tester-pipeline/master
    Description:  owner/repository/branch

  GitHubOAuthToken:
    Type: String
    Default:  "1fdc9871974126a405916f93c15cd44811f7fd86"
    Description:  CodePipeline requires an OAuthToken
  
  ProjectName:
    Description: Name of the Project
    Type: String
    Default: jameel-pipeline-testing

  CMKARN:
    Description: ARN of the KMS CMK creates in Tools account
    Type: String
    Default: "arn:aws:kms:us-east-1:226518205592:key/9d8d6eaa-9ab3-42b0-be37-29cdb321bdb7"

  S3Bucket:
    Description: S3 Bucket, which will hold the artifacts
    Type: String
    Default: "pre-reqs-artifactbucket-sh1w7btfdx3e"

Resources:

  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        'Fn::Join': [ "", ["CodeBuildRole", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codebuild.amazonaws.com"
          Action: "sts:AssumeRole"

  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        'Fn::Join': [ "", ["CodePipelineRole", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codepipeline.amazonaws.com"
          Action: "sts:AssumeRole"

  # This can be restricted more
  CodeBuildPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "", ["CodeBuildPolicy", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - logs:FilterLogEvents
            - logs:DescribeLogStreams
            - logs:DeleteLogGroup
            - s3:putObject
            - s3:getObject
            - codebuild:*
            - 'cloudformation:List*'
            - 'cloudformation:Get*'
            - 'cloudformation:PreviewStackUpdate'
            - 'cloudformation:ValidateTemplate'
            - 'cloudformation:CreateStack'
            - 'cloudformation:CreateUploadBucket'
            - 'cloudformation:DeleteStack'
            - 'cloudformation:Describe*'
            - 'cloudformation:UpdateStack'
            - 'lambda:Get*'
            - 'lambda:List*'
            - 'lambda:CreateFunction'
            - 'lambda:AddPermission'
            - 'lambda:CreateAlias'
            - 'lambda:DeleteFunction'
            - 'lambda:InvokeFunction'
            - 'lambda:PublishVersion'
            - 'lambda:RemovePermission'
            - 'lambda:Update*'
            - 'apigateway:GET'
            - 'apigateway:POST'
            - 'apigateway:PUT'
            - 'apigateway:DELETE'
            - 's3:CreateBucket'
            - 's3:DeleteBucket'
            - 's3:ListBucket'
            - 's3:ListBucketVersions'
            - 's3:PutObject'
            - 's3:GetObject'
            - 's3:DeleteObject'
            - 'iam:PassRole'
            - 'kinesis:*'
            - 'iam:GetRole'
            - 'iam:CreateRole'
            - 'iam:PutRolePolicy'
            - 'iam:DeleteRolePolicy'
            - 'iam:DeleteRole'
            - 'cloudwatch:GetMetricStatistics'
            - 'events:Put*'
            - 'events:Remove*'
            - 'events:Delete*'
            - 'dynamodb:*'
            - iam:SimulateCustomPolicy
            - iam:SimulatePrincipalPolicy
          Resource: "*"
      Roles:
        -  !Ref CodeBuildRole

  CodePipelinePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "", ["CodePipelinePolicy", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:putObject
            - s3:getObject
            - codebuild:*
          Resource:
            - "*"
      Roles:
        -  !Ref CodePipelineRole

#Creting the s3 bucket to store the artifacts from the code pipeline
  # S3:
  #   Type: "AWS::S3::Bucket"
  #   Properties:
  #     BucketName: !Join [ "", [!Ref CodePipelineBucketPrefix, !Ref 'Environment', "-", !Ref "AWS::Region"]]

  # TestBuild:
  #   Type: "AWS::CodeBuild::Project"
  #   Properties:
  #     Name: Test-Build
  #     Description: Demo of CodeBuild with CodeDeploy pipeline.
  #     ServiceRole: !Ref CodeBuildRole
  #     TimeoutInMinutes: 5
  #     Source:
  #       Type: CODEPIPELINE
  #       BuildSpec: !Join [ "", ["buildspec", "-", !Ref 'Environment', ".yml"]]
  #     Environment:
  #       Type: "LINUX_CONTAINER"
  #       ComputeType: BUILD_GENERAL1_SMALL
  #       Image: aws/codebuild/nodejs:10.1.0
  #     Artifacts:
  #       Type: CODEPIPELINE

  # BuildDeploy:
  #   Type: "AWS::CodeBuild::Project"
  #   Properties:
  #     Name: Build-Deploy
  #     Description: Demo of CodeBuild with CodeDeploy pipeline.
  #     ServiceRole: !Ref CodeBuildRole
  #     TimeoutInMinutes: 5
  #     Source:
  #       Type: CODEPIPELINE
  #       BuildSpec: !Sub |
  #           version: 0.2
  #           phases:
  #             build:
  #               commands:
  #                 - bash deploy.sh
  #     Environment:
  #       Type: "LINUX_CONTAINER"
  #       ComputeType: BUILD_GENERAL1_SMALL
  #       EnvironmentVariables:
  #         - Name: env
  #           Type: PLAINTEXT
  #           Value: !Ref Environment
  #       Image: aws/codebuild/nodejs:10.1.0
  #     Artifacts:
  #       Type: CODEPIPELINE

# #Build Project Definition
#   BuildProject:
#     Type: AWS::CodeBuild::Project
#     Properties:
#       Description: !Sub
#         - '${Project}/BuildCBProject'
#         - { Project: !Ref ProjectName }
#       EncryptionKey: !Ref CMKARN
#       ServiceRole: !GetAtt CodeBuildRole.Arn
#       Artifacts:
#         Type: CODEPIPELINE
#       Environment:
#         Type: LINUX_CONTAINER
#         ComputeType: BUILD_GENERAL1_SMALL
#         Image: aws/codebuild/standard:2.0
#         EnvironmentVariables:
#           - Name: S3Bucket
#             Value: !Ref S3Bucket
#           - Name: KMSKey
#             Value: !Ref CMKARN
#       Source:
#         Type: CODEPIPELINE
#         BuildSpec: |
#           version: 0.2
#           phases:
#             install:
#               runtime-versions:
#                 python: 3.7
#               commands:
#                 - printenv
#                 - ls -R
#                 - pip install -r SampleLambda/scripts/requirements.txt -t "$PWD"
#             build:
#               commands:
#                 - aws cloudformation package --template-file SampleLambda/lambda-cloudformation.yaml --s3-bucket $S3Bucket --s3-prefix sample-lambda/codebuild --output-template-file samtemplate.yaml
#           artifacts:
#             files: 
#               - samtemplate.yaml
#               - SampleLambda/scripts/*
#             discard-paths: yes

#       TimeoutInMinutes: 10
#       Tags:
#         - Key: Name
#           Value: !Ref ProjectName

  TestProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: !Sub
        - '${Project}/TestCBProject'
        - { Project: !Ref ProjectName }
      EncryptionKey: !Ref CMKARN
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.7
              commands:
                - printenv
                - ls -R
                - pip install -r SampleLambda/scripts/requirements.txt -t "$PWD"
            build:
              commands:
                - cd SampleLambda/scripts
                - python -m unittest test_module.py
      TimeoutInMinutes: 10
      Tags:
        - Key: Name
          Value: !Ref ProjectName

  # CodePipeline with its stages:
  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Ref AWS::StackName
      ArtifactStore:
        Location: !Ref S3Bucket
        Type: S3
      RestartExecutionOnUpdate: true
      RoleArn: !Join [ "", ["arn:aws:iam::", !Ref "AWS::AccountId", ":role/", !Ref CodePipelineRole  ] ]
      Stages:

        # Stage 1:  Get the source from GitHub:
        - Name: Source
          Actions:
            - Name: SourceAction
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Select [0, !Split [ "/" , !Ref GitHubRepository ]]
                Repo: !Select [1, !Split [ "/" , !Ref GitHubRepository ]]
                Branch: !Select [2, !Split [ "/" , !Ref GitHubRepository ]]
                PollForSourceChanges: true
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: TheSourceCode

        # - Name: Build
        #   Actions:
        #     - Name: Build
        #       ActionTypeId:
        #         Category: Build
        #         Owner: AWS
        #         Version: 1
        #         Provider: CodeBuild
        #       Configuration:
        #         ProjectName: !Ref BuildProject
        #       RunOrder: 1
        #       InputArtifacts:
        #         - Name: TheSourceCode
        #       OutputArtifacts:
        #         - Name: BuildOutput

        - Name: Test
          Actions:
            - Name: RunUnitTests
              ActionTypeId:
                Category: Test
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref TestProject
              InputArtifacts:
                - Name: TheSourceCode

        # # Stage 2:  Build using Serverless Framework
        # - Name: TestBuild
        #   Actions:
        #     - Name: Test-Build
        #       RunOrder: 1
        #       InputArtifacts:
        #         - Name: TheSourceCode
        #       ActionTypeId:
        #         Category: Build
        #         Owner: AWS
        #         Provider: CodeBuild
        #         Version: 1
        #       Configuration:
        #         ProjectName:  !Ref TestBuild
        #       OutputArtifacts:
        #         - Name: TheArtifact

        # # Stage 3:  Build and Deploy using Serverless Framework
        # - Name: BuildDeploy
        #   Actions:
        #     - Name: Build-Deploy
        #       RunOrder: 1
        #       InputArtifacts:
        #         - Name: TheArtifact
        #       ActionTypeId:
        #         Category: Build
        #         Owner: AWS
        #         Provider: CodeBuild
        #         Version: 1
        #       Configuration:
        #         ProjectName:  !Ref BuildDeploy
        #       OutputArtifacts:
        #         - Name: TheArtifact2

  # GithubWebhook:
  #   Type: 'AWS::CodePipeline::Webhook'
  #   Properties:
  #     Authentication: GITHUB_HMAC
  #     AuthenticationConfiguration:
  #       SecretToken: !Ref GitHubOAuthToken
  #     RegisterWithThirdParty: 'true'
  #     Filters:
  #     - JsonPath: "$.ref"
  #       MatchEquals: refs/heads/master
  #     TargetPipeline: !Ref Pipeline
  #     TargetAction: SourceAction
  #     TargetPipelineVersion: !GetAtt Pipeline.Version

Outputs:
  CodeBuild:
    Value: !Ref Pipeline
  Environment:
    Value: !Ref Environment
  Github:
    Value: !Ref GitHubRepository
  CodeBuildRole:
    Value: !Ref CodeBuildRole
  CodeBuildPolicy:
    Value: !Ref CodeBuildPolicy
  CodePipelineRole:
    Value: !Ref CodePipelineRole
  CodePipelinePolicy:
    Value: !Ref CodePipelinePolicy
  # S3:
  #   Value: !Ref S3
